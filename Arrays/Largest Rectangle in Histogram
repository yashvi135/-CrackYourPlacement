class Solution {
    public int largestRectangleArea(int[] heights) {
       return getMaxArea(heights);
    }
    public int getMaxArea(int[] heights){
        int[] left=nextSmallerLeft(heights);
        int[] right=nextSmallerRight(heights);
        int max_height=0;
        
        for(int i=0;i<heights.length;i++){
            max_height=Math.max(max_height,(right[i]-left[i]-1)*heights[i]);
            
        }
        return max_height;
    }
    public int[] nextSmallerLeft(int heights[]){
        int n=heights.length;
        int[] nextSmaller=new int[n];
        Stack<Integer>s=new Stack<>();
        for(int i=0;i<n;i++){
            while(!s.isEmpty()&&heights[s.peek()]>=heights[i])
                s.pop();
            nextSmaller[i]=s.isEmpty()?-1:s.peek();
            s.push(i);
        }
        return nextSmaller;
    }
    public int[] nextSmallerRight(int heights[]){
        int n=heights.length;
        int[] nextSmaller=new int[n];
        Stack<Integer>s=new Stack<>();
        for(int i=n-1;i>=0;i--){
            while(!s.isEmpty()&&heights[s.peek()]>=heights[i])
                s.pop();
            nextSmaller[i]=s.isEmpty()?n:s.peek();
            s.push(i);
        }
        return nextSmaller;
    }
    
}
